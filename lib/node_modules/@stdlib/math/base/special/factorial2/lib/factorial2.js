'use strict';

// MODULES //

var exp2 = require( '@stdlib/math/base/special/exp2' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var isnan = require( '@stdlib/math/base/utils/is-nan' );
var isInteger = require( '@stdlib/math/base/utils/is-integer' );
var isNegativeZero = require( '@stdlib/math/base/utils/is-negative-zero' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var DOUBLE_FACTORIALS = require( './doublefactorials.json' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );

// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant
var PIO2 = 1.57079632679489661923; // pi/2


// MAIN //

/**
* Evaluates the double factorial of `x`.
*
* @param {number} x - input value
* @returns {number} double factorial
*
* @example
* var v = factorial2( 3.0 );
* // returns 3.0
* @example
* var v = factorial2( -1.5 );
* // returns ~-1.381
* @example
* var v = factorial2( -0.5 );
* // returns ~-0.963
* @example
* var v = factorial2( 0.5 );
* // returns ~0.963
* @example
* var v = factorial2( -10.0 );
* // returns NaN
* @example
* var v = factorial2( 171.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = factorial2( NaN );
* // returns NaN
*/
function factorial2( x ) {
	var n;
	if (
		(isInteger( x ) && x < 0) ||
		x === NINF ||
		isnan( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( isNegativeZero( x ) ) {
			return NINF;
		}
		return PINF;
	}
	if ( isInteger( x ) ) {
		if ( x <= MAX_FACTORIAL ) {
			return DOUBLE_FACTORIALS[ x ];
		}
		return PINF;
	}
	if (
		x < -170.5674972726612 ||
		x > 170.61447887182298
	) {
		return PINF;
	}
	n = ( x + 1.0 ) / 2.0;
	return exp2( n ) * gamma( n + 0.5 ) / sqrt( PIO2 );
} // end FUNCTION factorial2()


// EXPORTS //

module.exports = factorial2;
