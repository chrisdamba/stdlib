#!/usr/bin/env julia

import JSON
import Base: factorial

"""
    gen( x, name )

Generate fixture data and write to file.

# Arguments

* `x`: domain
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = linspace( 0, 170, 171 );
julia> generate_integers( x, \"integers.json\" );
julia> generate_decimals( x, \"decimals.json\" );
```
"""

function doublefactorial(n::Float64)
    if n < 0
        throw(DomainError())
    end
    z = BigInt()
    ccall((:__gmpz_2fac_ui, :libgmp), Void,
        (Ptr{BigInt}, UInt), &z, UInt(n))
    return z
end

function factorial2(x::Float64)
	n = ( x + 1.0 ) / 2.0
	PIO2 = 1.57079632679489661923
	z = 2^n * gamma( n + 0.5 ) / sqrt( PIO2 )
    return z
end

function generate_integers( x, name )
	y = Array( Integer, length( x ) );
	for i in eachindex(x)
		y[i] = doublefactorial( x[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("expected", y)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end


function generate_decimals( x, name )	
	y = Array( Float64, length( x ) );
	for i in eachindex(x)
		y[i] = factorial2( x[i] );
	end

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("expected", y)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Integer values:
x = linspace( 0, 170, 171 );
generate_integers( x, "integers.json" );

# Decimal values:
x = linspace( -171.1, 170.1, 1003 );
generate_decimals( x, "decimals.json" );
